generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id          String       @id @default(cuid())
  name        String
  logo        String
  slug        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  classes     Class[]
  departments Department[]
  parents     Parent[]
  streams     Stream[]
  students    Student[]
  teachers    Teacher[]

  @@map("schools")
}

model Contact {
  id         String   @id @default(cuid())
  fullName   String
  email      String   @unique
  phone      String
  school     String   @unique
  country    String
  schoolPage String
  students   Int
  role       String
  media      String
  message    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("contacts")
}

model Class {
  id        String    @id @default(cuid())
  title     String
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  schoolId  String
  school    School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  streams   Stream[]
  students  Student[]

  @@map("classes")
}

model Stream {
  id        String    @id @default(cuid())
  title     String
  slug      String    @unique
  classId   String
  schoolId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  class     Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
  school    School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  students  Student[]

  @@map("streams")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String
  role          UserRole
  name          String
  phone         String?
  image         String?
  schoolId      String?
  schoolName    String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  teacherId     String?
  studentId     String?
  parentId      String?
  parent        Parent?
  refreshTokens RefreshToken[]
  student       Student?
  teacher       Teacher?

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Parent {
  id            String    @id @default(cuid())
  title         String
  firstName     String
  lastName      String
  relationship  String
  email         String    @unique
  NIN           String    @unique
  gender        String
  dob           DateTime
  phone         String    @unique
  nationality   String
  whatsapNo     String?
  imageUrl      String?
  contactMethod String
  occupation    String
  address       String
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  schoolId      String
  userId        String    @unique
  school        School    @relation(fields: [schoolId], references: [id])
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  students      Student[]

  @@map("parents")
}

model Student {
  id            String   @id @default(cuid())
  name          String
  firstName     String
  lastName      String
  email         String   @unique
  studentType   String?  @default("PS")
  password      String
  imageUrl      String?
  phone         String?
  parentName    String?
  classTitle    String?
  streamTitle   String?
  state         String
  BCN           String   @unique
  nationality   String
  religion      String
  gender        String
  dob           DateTime
  rollNo        String   @unique
  regNo         String   @unique
  admissionDate DateTime
  address       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  parentId      String
  classId       String
  streamId      String
  schoolId      String
  userId        String   @unique
  class         Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  parent        Parent   @relation(fields: [parentId], references: [id], onDelete: Cascade)
  school        School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  stream        Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("students")
}

model Teacher {
  id                       String              @id @default(cuid())
  createdAt                DateTime            @default(now())
  updatedAt                DateTime            @updatedAt
  title                    String
  firstName                String
  lastName                 String
  email                    String              @unique
  phone                    String              @unique
  whatsapNo                String?
  dateOfBirth              DateTime
  gender                   Gender
  imageUrl                 String?
  NIN                      String              @unique
  password                 String?
  isActive                 Boolean             @default(true)
  lastLogin                DateTime?
  contactMethod            String
  employeeId               String              @unique
  dateOfJoining            DateTime
  designation              String
  mainSubject              String?
  mainSubjectId            String?
  qualification            String
  departmentName           String
  departmentId             String
  subjects                 String[]
  classes                  String[]
  classesIds               String[]
  address                  String?
  nationality              String
  emergencyContactName     String?
  emergencyContactPhone    String?
  emergencyContactRelation String?
  experience               Int?
  bio                      String?
  skills                   String?
  schoolId                 String
  userId                   String              @unique
  attendance               TeacherAttendance[]
  documents                TeacherDocument[]
  leaves                   TeacherLeave[]
  department               Department          @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  school                   School              @relation(fields: [schoolId], references: [id])
  user                     User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("teachers")
}

model Department {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  name         String
  slug         String    @unique
  hodId        String?
  hodName      String?
  hodStartDate DateTime?
  budget       Float?
  budgetYear   String?
  schoolId     String?
  school       School?   @relation(fields: [schoolId], references: [id])
  subjects     Subject[]
  teachers     Teacher[]

  @@map("departments")
}

model Subject {
  id             String          @id @default(cuid())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  name           String
  slug           String          @unique
  code           String
  shortName      String?
  category       SubjectCategory
  type           SubjectType
  passingMarks   Int?
  totalMarks     Int?
  departmentId   String
  departmentName String
  isActive       Boolean         @default(true)
  isOptional     Boolean         @default(false)
  hasTheory      Boolean         @default(true)
  hasPractical   Boolean         @default(false)
  labRequired    Boolean         @default(false)
  department     Department      @relation(fields: [departmentId], references: [id])

  @@map("subjects")
}

model TeacherDocument {
  id         String       @id @default(cuid())
  teacherId  String
  type       DocumentType
  title      String
  url        String
  uploadedAt DateTime     @default(now())
  teacher    Teacher      @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@index([teacherId])
  @@map("teacher_documents")
}

model TeacherAttendance {
  id        String           @id @default(cuid())
  teacherId String
  date      DateTime
  status    AttendanceStatus
  checkIn   DateTime?
  checkOut  DateTime?
  note      String?
  teacher   Teacher          @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([teacherId, date])
  @@index([teacherId])
  @@map("teacher_attendances")
}

model TeacherLeave {
  id         String      @id @default(cuid())
  teacherId  String
  startDate  DateTime
  endDate    DateTime
  type       LeaveType
  reason     String
  status     LeaveStatus @default(PENDING)
  approvedBy String?
  approvedAt DateTime?
  teacher    Teacher     @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@index([teacherId])
  @@map("teacher_leaves")
}

model Hackathon {
  id                  String          @id @default(cuid())
  name                String
  tagline             String
  about               String
  themes              String[]
  approxParticipants  Int
  minTeamSize         Int
  maxTeamSize         Int
  venue               String
  timezone            String
  applicationOpen     DateTime
  applicationClose    DateTime
  rsvpWithin          Int
  hackathonBegins     DateTime
  submissionDeadline  DateTime
  selectedFields      String[]
  websiteUrl          String?
  codeskUrl           String?
  contactEmail        String
  codeOfConductUrl    String?
  useCodeOfConductUrl Boolean         @default(false)
  twitter             String?
  linkedin            String?
  discord             String?
  slack               String?
  hashnode            String?
  telegram            String?
  facebook            String?
  instagram           String?
  brandColor          String
  logoUrl             String?
  faviconUrl          String?
  coverImageUrl       String?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  organizerId         String
  faqs                FAQ[]
  organizer           Organizer       @relation(fields: [organizerId], references: [id])
  partners            Partner[]
  projects            Project[]
  events              ScheduleEvent[]
  speakers            Speaker[]
  tracks              Track[]
}


enum TShirtSize {
  S
  M
  L
  XL
  XXL
}

model Builder {
  id                       String          @id @default(cuid())
  name                     String?
  email                    String?         @unique
  phone                    String?
  avatarUrl                String?
  bio                      String?
  gender                   Gender?
  tShirtSize               TShirtSize?

  // Education (now grouped in frontend)
  institution              String?
  degree                   String?
  fieldOfStudy             String?
  graduationYear           Int?

  // Skills & Experience
  skills                   String[]
  experience               String?
  resumeUrl                String?
  portfolioUrl             String?

  // Social Links (grouped in frontend)
  github                   String?
  linkedin                 String?
  twitter                  String?
  website                  String?

  // Additional Info
  interests                String[]
  dietaryRestrictions      String?
  
  // Emergency Contact (grouped in frontend)
  emergencyContactName     String?
  emergencyContactRelation String?
  emergencyContactPhone    String?

  createdAt                DateTime         @default(now())
  updatedAt                DateTime         @updatedAt
  projects                 ProjectBuilder[]
}


model Project {
  id            String           @id @default(cuid())
  projectName   String
  tagline       String
  problem       String
  challenges    String
  technologies  String[]
  links         String[]
  videoDemo     String?
  coverImageUrl String?
  pictureUrls   String[]
  logoUrl       String?
  platforms     String[]
  hackathonId   String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  hackathon     Hackathon        @relation(fields: [hackathonId], references: [id])
  builders      ProjectBuilder[]
}

model ProjectBuilder {
  id        String   @id @default(cuid())
  projectId String
  builderId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  builder   Builder  @relation(fields: [builderId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])

  @@unique([projectId, builderId])
}

model Organizer {
  id                 String      @id @default(cuid())
  name               String
  email              String      @unique
  phone              String
  role               String
  street             String
  city               String
  state              String
  country            String
  zipCode            String
  organizationName   String
  organizationType   String
  description        String
  website            String?
  logoUrl            String?
  establishedYear    Int
  teamSize           Int
  previousHackathons Int
  requiredSkills     String[]
  linkedin           String?
  twitter            String?
  github             String?
  facebook           String?
  instagram          String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  hackathons         Hackathon[]
}

model Partner {
  id          String    @id @default(cuid())
  name        String
  logoUrl     String?
  website     String?
  hackathonId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hackathon   Hackathon @relation(fields: [hackathonId], references: [id])
}

model Track {
  id          String    @id @default(cuid())
  name        String
  description String
  prizes      Json
  hackathonId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hackathon   Hackathon @relation(fields: [hackathonId], references: [id])
}

model Speaker {
  id          String    @id @default(cuid())
  name        String
  bio         String
  photoUrl    String?
  designation String
  company     String
  hackathonId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hackathon   Hackathon @relation(fields: [hackathonId], references: [id])
}

model ScheduleEvent {
  id          String    @id @default(cuid())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  type        String
  location    String?
  hackathonId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hackathon   Hackathon @relation(fields: [hackathonId], references: [id])
}

model FAQ {
  id          String    @id @default(cuid())
  question    String
  answer      String
  hackathonId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hackathon   Hackathon @relation(fields: [hackathonId], references: [id])
}

enum SubjectCategory {
  CORE
  ELECTIVE
  ADDITIONAL
  VOCATIONAL
  LANGUAGE
  EXTRA_CURRICULAR
}

enum SubjectType {
  THEORY
  PRACTICAL
  BOTH
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum DocumentType {
  RESUME
  CERTIFICATE
  ID_PROOF
  QUALIFICATION
  CONTACT
  OTHER
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HALF_DAY
  ON_LEAVE
}

enum LeaveType {
  SICK
  CASUAL
  VACATION
  MATERNITY
  PATERNITY
  OTHER
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELED
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  TEACHER
  STUDENT
  PARENT
}
